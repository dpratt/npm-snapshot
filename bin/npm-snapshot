#!/usr/bin/env node

"use strict";

const spawn = require('child_process').spawn,
    exec = require('child_process').exec,
    path = require('path'),
    fs = require('fs'),
    semverUtil = require('../lib/semver');
    
function error(msg) {
  console.error(msg);
  process.exit(-1);
} 

function getPkg() {
  try {
    return JSON.parse(fs.readFileSync(path.resolve(process.cwd(), './package.json')));
  } catch(e) {
    error('Could not open a package.json.');
  }
}

const oldVersion = getPkg().version;
if (!oldVersion) error('No version in package.json found.');

const semver = semverUtil.parseSemver(oldVersion);
if(!semver) error("Could not parse version from package.json");

let prereleaseTag = semver.release;
let buildNumber = process.argv[2];

if (prereleaseTag) {
  const parts = prereleaseTag.split('.');

  if (parts.length > 0) {
    // strip off everything after the first '.' (if present)
    prereleaseTag = parts[0];

    if (!buildNumber && parts.length > 1) {
      // use  build number if it hasn't been specified
      const parsed = parseInt(parts[1]);

      if (parsed) {
        buildNumber = "" + ( parsed + 1 );
      }
    }
  }
}

semver.release = `${ prereleaseTag || "SNAPSHOT" }.${ buildNumber || "1" }`;
const version = semverUtil.stringifySemver(semver);

console.log(`Setting version to ${version}`);

// Run npm version without tagging
const npm = spawn('npm', [ '--no-git-tag-version', 'version', version ]);
npm.stderr.pipe(process.stderr);

npm.on('close', function (code) {
  if (code !== 0) return error('npm version. Exiting.');
  process.stdout.write(prereleaseTag);
  process.exit(0);
});
